
	$Id$

Installing the FreeForm server for the OPeNDAP server.

Updated for version 3.7.12

---------------------------------------------------------------------------

BUILDING THE SOFTWARE
Notes about the RSS build options
REQUIREMENTS
NOTES

---------------------------------------------------------------------------

BUILDING THE SOFTWARE

0) Please skim REQUIREMENTS and NOTES sections of this file before reporting
   problems. Thanks.

1) Type `./configure' at the system prompt. On some systems you may have to
   type `sh configure.'

2a) Type `make' to build the three server programs

2b) Optionally, run the tests by typing `make check' to run the test suite.
    You must have the DejaGNU test software installed on your computer to run
    the tests.

3) Install the server components in $prefix by running `make install.'

4) Type 'make bes-conf' to run the bes-nc-data.sh script which inserts the
   handler in the bes.conf file and adds test data to 
   $prefix/share/hyrax/data.

5) For many installations, you must arrange for your operating system to find
   the shared libraries installed by default in $prefix/lib. Do this by
   either setting an environment variable such as LD_LIBRARY_PATH or by
   editing /etc/ld.so.conf. Different operating systems handle this in
   different ways.

RSS Build option Note: 

To build this handler so that it can read format files when files are
named with date strings (e.g., those used at Remote Sensing Systems) define
'RSS' in Makefile.am by adding '-DRSS' to AM_CXXLFAGS near the top of the file.
Here's a brief description of the file naming convensions this switch
enables:

    File naming convention: <data source> + '_' + <date_string> + <version> +
    (optional)< _d3d > When <date_string> includes YYYYMMDDVV ('DD') the file
    contains 'daily' data. When <date_string> only includes YYYYMMVV ( no
    'DD'), or includes ('DD') and optional '_d3d' then the file contains
    averaged data.

Testing:

    To test the RSS option, do two things. First, soft link RSS_test_data/RSS
    to /usr/local/RSS. Here's how I did it: 

        [jimg@zoe freeform_handler]$ ln -s /home/jimg/trunk/freeform_handler/RSS_test_data/RSS /usr/local/RSS

    Then use the standalone version of the handler to get a DDS:

        [jimg@zoe freeform_handler]$ ./dap_ff_handler -o DDS RSS_test_data/tmi_20040601v4

    And then get some data using the getdap tool to filter the binary output 

        [jimg@zoe freeform_handler]$ ./dap_ff_handler -e time_a -o DataDDS RSS_test_data/tmi_20040601v4  | getdap -

    Note that the argument to the -o option is 'DataDDS' in this case.

Building from Our SVN Repository

  If you are building from a SVN checkout, run 'autoreconf --verbose' before
  './configure; make'. If you try to run autoconf, et c., by hand and wind up
  with build files that don't work, use 'autoreconf --force --verbose'. Once
  autoreconf has made the configure and Makefile.in files, do ./configure;
  make; make install as outlined above.

REQUIREMENTS

  o You need the libdap library version 3.9.0 to build and install this
    software. If you're using Linux, this means either building form source
    or using the libdap and libdap-devel RPM packages.
    
  o If you're planning on using this with the OPeNDAP 4 Data Server (Hyrax),
    you'll need version 3.7.0 of the BES software. Make sure to build that 
    first.

  o To use this software with our cgi-based data server, ... Please stop
  using the CGI-based server!

  o The README file has some information about writing the format files used
    to describe data so that it can be served by the software. More complete
    documentation is available in the documentation section of the OPeNDAP
    page at http://www.opendap.org/.

NOTES

  o DEBUGGING AIDS

    - The OPeNDAP libdap library includes the following debugging aids that
      may be of help to you in developing new applications.

    - DBG: simple program instrumentation -- see the file debug.h distributed
      with libdap (which is installed in the libdap header directory; use
      'config-libdap --cflags' and look at the value if -I).

    - DBG2: more elaborate program instrumentation -- by convention this is
      used for output that is half a page or more, while DEBUG is used for
      single line output.
