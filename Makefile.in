
# $Id: Makefile.in,v 1.15 1999/03/26 20:03:31 jimg Exp $

@SET_MAKE@

PROG = ff_das ff_dds ff_dods
FF_LIBS = libfreeform.a libmaxmin.a 
FF_TOOLS = newform bufform chkform readfile
DODS_ROOT = ../..

WWW_ROOT = @WWW_ROOT@
INCS = -I. -I$(DODS_ROOT)/include -IFFND @INCS@
DEFS = @DEFS@ -DUSE_LIBGXX_INLINES
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
CXXFLAGS = @CXXFLAGS@ -Wall
TEST_COV_FLAGS = -ftest-coverage -fprofile-arcs
CFLAGS = @CFLAGS@ -Wall

# Search in both the FFND and FFND/lib dirs for the freeform libraries.
LDFLAGS = @LDFLAGS@ -L. -L$(DODS_ROOT)/lib -LFFND -LFFND/lib
LFLAGS = -8
YFLAGS = -d -v
LIBS = -ldap++ -lfreeform -lmaxmin @LIBS@ -lm
TAGS_FLAGS = --include=../dap/TAGS

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

src = $(DODS_ROOT)/src
etcdir = $(DODS_ROOT)/etc

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
version = @VERSION@
dir = ff-dods-@VERSION@

# testsuite specifics
RUNTEST = runtest
RUNTESTFLAGS = #--all --verbose

# names of key programs

LN_S = @LN_S@
CP = cp
AWK = @AWK@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
STRIP = strip
DOCXX = doc++

FFSRC = FFArray.cc FFByte.cc FFFloat64.cc FFFunction.cc \
	FFGrid.cc FFInt32.cc FFList.cc FFSequence.cc FFStr.cc \
	FFUInt32.cc FFStructure.cc FFUrl.cc util_ff.cc ff_read.c \
	FFInt16.cc FFUInt16.cc FFFloat32.cc \
	ce_functions.cc date_proc.cc DODS_Date.cc \
	DODS_Time.cc DODS_Time_Factory.cc DODS_Date_Factory.cc \
	DODS_Date_Time.cc DODS_Date_Time_Factory.cc

FFOBJ =	FFArray.o FFByte.o FFFloat64.o FFFunction.o FFGrid.o \
	FFInt32.o FFList.o FFSequence.o FFStr.o FFStructure.o \
	FFInt16.o FFUInt16.o FFFloat32.o \
	FFUInt32.o FFUrl.o util_ff.o ff_read.o ce_functions.o date_proc.o \
	DODS_Date.o DODS_Time.o DODS_Time_Factory.o DODS_Date_Factory.o \
	DODS_Date_Time.o DODS_Date_Time_Factory.o


SERVSRC = ff_dods.cc ffdds.cc
SERVOBJ = ff_dods.o ffdds.o

DDSSRC = ff_dds.cc ffdds.cc
DDSOBJ = ff_dds.o ffdds.o

DASSRC = ffdas.cc ff_das.cc
DASOBJ = ffdas.o ff_das.o

ALLSRCS = $(FFSRC) $(SERVSRC) $(DDSSRC) $(DASSRC)

all: $(FF_LIBS) $(FF_TOOLS) ff_das ff_dds ff_dods

ff_das: $(DASOBJ) $(FFOBJ) 
	$(CXX) $(LDFLAGS) -o ff_das $(DASOBJ) $(FFOBJ) $(LIBS)

ff_dds: $(DDSOBJ) $(FFOBJ)
	$(CXX) $(LDFLAGS) -o ff_dds $(DDSOBJ) $(FFOBJ) $(LIBS)

ff_dods: $(SERVOBJ) $(FFOBJ)
	$(CXX) $(LDFLAGS) -o ff_dods $(SERVOBJ) $(FFOBJ) $(LIBS)

libfreeform.a: 
	cd FFND; $(MAKE) $(MFLAGS) $@

libmaxmin.a: 
	cd FFND; $(MAKE) $(MFLAGS) $@

chkform: 
	cd FFND; $(MAKE) $(MFLAGS) $@

newform: 
	cd FFND; $(MAKE) $(MFLAGS) $@

bufform: 
	cd FFND; $(MAKE) $(MFLAGS) $@

readfile: 
	cd FFND; $(MAKE) $(MFLAGS) $@

check: all
	-$(RUNTEST) --tool ff_das -srcdir ff-test
	-$(RUNTEST) --tool ff_dds -srcdir ff-test
	-$(RUNTEST) --tool ff_dods -srcdir ff-test

test_read_ff: ff_read.c libfreeform.a libmaxmin.a
	$(CC) -c -g -O0 $(CPPFLAGS) -DTEST -o ff_read.o ff_read.c
	$(CC) $(LDFLAGS) ff_read.o -o test_read_ff -lfreeform -liberty -lm \
	-lmaxmin

# Target to test the date code
tdate: DODS_Date.cc date_proc.cc
	$(CXX) -c -g -O0 -DTEST_DATE $(CPPFLAGS) DODS_Date.cc
	$(CXX) -c -g -O0 $(CPPFLAGS) date_proc.cc
	$(CXX) $(LDFLAGS) -o tdate DODS_Date.o date_proc.o

install: all
	$(INSTALL_PROGRAM) -s ff_das $(etcdir)
	$(INSTALL_PROGRAM) -s ff_dds $(etcdir)
	$(INSTALL_PROGRAM) -s ff_dods $(etcdir)
	$(INSTALL_PROGRAM) nph-ff $(etcdir)
	$(INSTALL_PROGRAM) FFND/newform $(bindir)/newform
	$(INSTALL_PROGRAM) FFND/readfile $(bindir)/readfile
	$(INSTALL_PROGRAM) FFND/chkform $(bindir)/chkform
	$(INSTALL_PROGRAM) FFND/readfile $(bindir)/readfile

Makefile: ${srcdir}/Makefile.in
	${SHELL} ./config.status

clean:
	-rm -f *.o *.sum *.log *~ core *.bb *.bbg *.da
	-rm -f $(PROG) test_read_ff
	-cd FFND && $(MAKE) $(MFLAGS) clean

distclean: clean
	-rm -f config.status config.log config.cache
	-cd FFND && $(MAKE) $(MFLAGS) distclean
	-rm -f test-coverage/*

# In order to get the latex docs to work (compile w/latex) you need the
# docxx.sty file where latex will find it. 9/15/98 jhrg
.PHONY: docs
docs:
	@echo "Building reference documentation."
	-mkdir docs-html;
        # First build the HTML docs, then the tex docs.
	$(DOCXX) -H -d docs-html -f -B /dev/null *.h
	-mkdir docs-latex;
	$(DOCXX) -t -o docs-latex/ff-reference.tex *.h

test-coverage: clean
	$(MAKE) $(MFLAGS) CXXFLAGS="$(CXXFLAGS) $(TEST_COV_FLAGS)" \
	CFLAGS="$(CFLAGS $(TEST_COV_FLAGS)" check

# Note that the gcov options -f and -b are useful but sometimes make looking
# at the results of coverage analysis a little taxing. -b reports on all
# branched and -f reports on all functions. The -l -o options summarize on a
# per-file basis. 3/27/98 jhrg
collect-coverage-data:
	(cd test-coverage; \
         cov_dat="coverage-data-`date +%m.%d.%y`"; \
	 touch $$cov_dat; \
	 for f in $(ALLSRCS); do \
	     echo "\n*** Coverage data for $$f ***\n" >> $$cov_dat; \
	     gcov -l -o ../ $$f >> $$cov_dat; \
         done)

.PHONY: tar
tar:
	-rm -f config.cache config.status config.log
	cd $(DODS_ROOT)/.. && \
	tar --exclude '*/old' --exclude '*/.#*' --exclude '*/CVS' \
	    --gzip --create --dereference --file DODS-$(dir).tar.gz \
	    DODS/src/$(dir)

.PHONY: update-version
update-version: check-version
	@echo "Version is: `cat version.h`"
	if [ ! -d ../$(dir) ]; then \
	    mv ../ff-dods* ../$(dir);\
	fi

# Compare the version encoded in this Makefile (set by configure) with the
# version in version.h. The version make variable is set up near the top of
# the Makefile.
.PHONY: check-version
check-version:
	@echo "Checking for version.h and Makefile version match-up"
	@if [ "$(version)" != "`cat version.h`" ]; \
	then \
		echo "You must manually re-run configure!"; \
		exit 1; \
	else \
		echo "Yes, they match."; \
	fi

.PHONY: depend
depend: 
	@depend@ -m dependencies \
	-- $(CPPFLAGS) -I/usr/local/lib/g++-include -- \
	$(FFSRC) $(SERVSRC)

.PHONY: tags
tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h *.c

.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

include dependencies
